UNIVERSIDADE FEDERAL DA FRONTEIRA SUL
Disciplina: Inteligência Artificial
Professor: José Carlos Bins Filho
Alunos: Rafael Hengen Ribeiro (rafaelhr.ribeiro@gmail.com), Ricardo Parizotto (ricardo.dparizotto@gmail.com)

* Busca minimax para o jogo de trilha *

1. Descrição:
O trabalho consiste em uma implementação de buscas e funções heurísticas para realização de movimento inteligente
no jogo de trilha.
São feitas duas funções de busca: o algoritmo minimax e a poda "alpha-beta", ambos com limite de profundidade e que
fornecem informações para o cálculo de estatísticas.

2. Funcionamento (heurística):
As heurísticas atribuem um valor para um estado do tabuleiro, considerando a soma de pontos nas trilhas.
Os pontos nas trilhas são atribuídos com base nas peças que estão na trilha ou próximas.
Além disso, considera a diferença de peças entre os jogadores e a profundidade da busca.

3. Compilação:
Há um Makefile que realiza todo o processo de compilação dos arquivos. Para compilar o programa basta 
executar o comando $ make no terminal.

4. Execução:
Para executar basta executar o comando $ bin/trilha
O programa mostrará o tabuleiro e as respectivas jogadas.

5. Utilização das funções:
Para utilização das funções minimax e poda_alpha_beta deve-se incluir o arquivo "include/defs.h" no cabeçalho do programa principal e 
compilar o arquivo jogo.cpp juntamente com os outros arquivos fontes do programa.
5.1. Funções minimax
    5.1.1 - Protótipo:
        int minimax(int *tab,Jogada *jogada, int profundidade, int max_prof, int jor, int fase);
    5.1.2 - Descrição:
        A variável tab é o vetor que representa o tabuleiro
        A jogada uma estrutura definida na descrição do trabalho que representa um estado e é modificada pela execução da minimax
        profundidade é um inteiro que representa a profundidade da busca, deve-se iniciar em 0
        max_prof é um inteiro que limita a profundidade da busca
        jor é o jogador atual
        fase é um inteiro que representa a fase do jogo
    5.1.3 - Minimax inserção
        Uma função minimax para a fase de inserção de peças (início do jogo).
        5.1.3.1 - Protótipo:
            int minimax_insercao(int * tab, Jogada *jogada, int profundidade, int max_prof, int jor, int fase);
        5.1.3.2 - Descrição: 
            As variáveis tem o mesmo significado que na função anterior.
    5.1.4 - Minimax Salto
        Função minimax para a fase de salto (quando o jogador fica com apenas 3 peças)
        5.1.4.1 - Protótipo:
            int minimax_salto(int * tab, Jogada *jogada, int profundidade, int max_prof, int jor, int fase);
        5.1.4.2 - Descrição: 
            As variáveis tem o mesmo significado que na função anterior.
        

5.2. Função de poda alpha-beta
    5.2.1 - Protótipo:
        int poda_alpha_beta(int * tab, Jogada *jogada, int profundidade, int max_prof, int jor, int fase, int alpha, int beta);
    5.2.2 - Descrição:
        A variável tab é o vetor que representa o tabuleiro
        A jogada uma estrutura definida na descrição do trabalho que representa um estado e é modificada pela execução da minimax
        profundidade é um inteiro que representa a profundidade da busca, deve-se iniciar em 0
        max_prof é um inteiro que limita a profundidade da busca
        jor é o jogador atual
        fase é um inteiro que representa a fase do jogo
        alpha é um inteiro utilizado na poda, deve-se inicializar em -infinito
        beta é um inteiro utilizado na poda, deve-se inicializar em +infinito
